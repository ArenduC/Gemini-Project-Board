import React, { useState } from 'react';
import { AiGeneratedProjectPlan, TaskPriority } from '../types';
import { XIcon, LoaderCircleIcon, CheckSquareIcon } from './Icons';

interface ProjectConfirmationModalProps {
    plan: AiGeneratedProjectPlan;
    onConfirm: () => Promise<void>;
    onCancel: () => void;
}

const priorityStyles: Record<TaskPriority, string> = {
  [TaskPriority.URGENT]: 'bg-gray-200 text-black font-bold',
  [TaskPriority.HIGH]: 'bg-gray-400 text-black',
  [TaskPriority.MEDIUM]: 'bg-gray-600 text-white',
  [TaskPriority.LOW]: 'bg-gray-800 text-gray-400',
};

export const ProjectConfirmationModal: React.FC<ProjectConfirmationModalProps> = ({ plan, onConfirm, onCancel }) => {
    const [isCreating, setIsCreating] = useState(false);

    const handleConfirm = async () => {
        setIsCreating(true);
        try {
            await onConfirm();
        } finally {
            // The parent will close the modal on success, but we should stop loading anyway.
            setIsCreating(false);
        }
    };
    
    return (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm z-40 flex items-center justify-center p-4" onClick={onCancel}>
            <div className="bg-[#131C1B] rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] flex flex-col" onClick={(e) => e.stopPropagation()}>
                <header className="p-4 border-b border-gray-800 flex justify-between items-center flex-shrink-0">
                    <div>
                        <h2 className="text-lg font-bold text-white">Confirm Your New Project</h2>
                        <p className="text-sm text-gray-400">Review the plan generated by AI.</p>
                    </div>
                    <button onClick={onCancel} className="p-2 rounded-full text-gray-400 hover:bg-gray-800 transition-colors">
                        <XIcon className="w-6 h-6" />
                    </button>
                </header>

                <div className="p-6 overflow-y-auto custom-scrollbar space-y-6">
                    <div>
                        <h3 className="text-xl font-bold text-white">{plan.name}</h3>
                        <p className="text-sm text-gray-400 mt-1">{plan.description}</p>
                    </div>
                    <div className="space-y-4">
                        {plan.columns.map((column, colIndex) => (
                            <div key={colIndex}>
                                <h4 className="font-semibold text-base text-white flex items-center gap-2">
                                    <span>{column.title}</span>
                                    <span className="text-xs font-medium bg-gray-700 text-white rounded-full px-2 py-0.5">
                                        {column.tasks.length}
                                    </span>
                                </h4>
                                <div className="mt-2 space-y-2 pl-4 border-l-2 border-gray-800">
                                    {column.tasks.map((task, taskIndex) => (
                                        <div key={taskIndex} className="bg-[#1C2326]/50 p-3 rounded-md">
                                            <div className="flex justify-between items-start">
                                                <p className="font-semibold text-sm text-white">{task.title}</p>
                                                <span className={`text-xs font-medium px-2 py-0.5 rounded-full ${priorityStyles[task.priority]}`}>
                                                    {task.priority}
                                                </span>
                                            </div>
                                            <p className="text-xs text-gray-400 mt-1">{task.description}</p>
                                            {task.subtasks.length > 0 && (
                                                <div className="mt-2 pl-4 border-l-2 border-gray-700 space-y-1">
                                                    {task.subtasks.map((subtask, subIndex) => (
                                                        <div key={subIndex} className="flex items-center gap-2">
                                                            <CheckSquareIcon className="w-4 h-4 text-gray-500 flex-shrink-0" />
                                                            <p className="text-xs text-gray-300">{subtask.title}</p>
                                                        </div>
                                                    ))}
                                                </div>
                                            )}
                                        </div>
                                    ))}
                                    {column.tasks.length === 0 && (
                                        <p className="text-sm text-gray-500 italic">No tasks in this column.</p>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>

                <footer className="p-4 border-t border-gray-800 flex justify-end gap-3 flex-shrink-0">
                    <button type="button" onClick={onCancel} className="px-4 py-2 bg-gray-700 text-white font-semibold rounded-lg hover:bg-gray-600 text-sm">
                        Cancel
                    </button>
                    <button onClick={handleConfirm} disabled={isCreating} className="px-4 py-2 bg-gray-300 text-black font-semibold rounded-lg shadow-md hover:bg-gray-400 disabled:bg-gray-500 disabled:cursor-not-allowed flex items-center gap-2 text-sm">
                        {isCreating && <LoaderCircleIcon className="w-5 h-5 animate-spin" />}
                        {isCreating ? 'Creating Project...' : 'Confirm & Create'}
                    </button>
                </footer>
            </div>
        </div>
    );
};